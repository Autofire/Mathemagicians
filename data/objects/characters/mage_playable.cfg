# mage_playable.cfg
# The player character
# Search for IMPORTANT before making any big changes
# TODO:
# Red: Create proper spell prepare UI
# Yellow: write code that helps get player around edges.

{

#DEFINES#
id: "mage_playable",
prototype: ["player_controlled"],
editor_info: { category: "Characters" },
solid_dimensions: ["player","common", "item"],
collide_dimensions: ["player", "common", "item"],
vehicle: false,
has_feet: false,
feet_width: null,
hitpoints: 10,
max_hitpoints: 10,
mass: 5,
is_human: true,
traction: 0,
no_move_to_standing: true,

on_collide_head: "add(midpoint_y, -1)",

zorder: "@include data/zorder.cfg:player",

properties: {
	walkspeed: 250,
	runspeed: 1000,
	//movespeed: "if(ctrl_tongue = true, runspeed, walkspeed)",
	movespeed: "walkspeed",
	posthit_invicibility_period: "80",	
	hurt_velocity: "int :: 1000",
	
	enemy_count: { type: 'int', default: 0 },
	
	cheat: "def() -> commands set(fire_level, 3)",
	
	player_damage_response: "def(string damage_type, int amount, int attacker_midpoint_x, int attacker_midpoint_y) -> commands
	[set(velocity_x, hurt_velocity * cos(angle)),
	set(velocity_y, hurt_velocity * sin(angle)), debug(angle)]
		where angle = if(attacker_midpoint_x > me.midpoint_x, 180.0, 0.0) +
				//	  if(attacker_midpoint_y > me.midpoint_y, 90.0, 0.0) +
					  atan(
						decimal(attacker_midpoint_y - me.midpoint_y)/
						decimal(attacker_midpoint_x - me.midpoint_x))
	",
	
	# -- gui -- #
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27+5, 27+5, {})",
		persistent: false,
	},
	gui_spell_exp_display: {
        type: "obj spell_exp_display",
        init: "object('spell_exp_display', 27+10, 27+40, {})",
        persistent: false,
    },    
	gui_spell_clip_display: {
        type: "obj spell_clip_display",
        init: "object('spell_clip_display', 27+200, 27+2, {})",
        persistent: false,
    },

	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display, gui_spell_clip_display]
	]",

		// This comes out of player_controlled; copied here for convenience
		store_event_add: "def(string event_name, int addend) -> commands
		set(stored_events, zip(stored_events, {(event_name): addend}, a+b))
		asserting event_name != '' | {message:'Attempting to add a stored event, but the event name given is an empty string.', name:event_name, addend:addend}",
	
	store_event: "def(string event_name, int value) -> commands
		add(stored_events, {(event_name): value})
		asserting event_name != '' | {message:'Attempting to store an event, but the event name given is an empty string.', name:event_name, value:value}",
	
	get_stored_event: "def(string event_name) -> string|int|null (stored_events[event_name])",
	stored_events: {type: "{string -> int}", default: {"started_game" : 1}},
	
	
	# -- String and List Manipulation -- #
	// This stuff is used mainly when erasing part of the user's entry
	// When entering left to right, we want tail. If right to left, then behead.
	tail: "def(string input) -> string
		if(input != '', input[:size(input)-1], input)",	// Drop last element
	behead: "def(string input) -> string
		input[1:]",				// Drop first
	
	// Doesn't seem to work
	set_list: "def(list inlist, int index, any value) -> list
		inlist[:index] + [value] + inlist[index+1:]",
	
	# -- Animation Groupings and Directional Helpers -- #
	
	// See hittable.cfg for most of the bools
	
	
	# -- Extra keybinds -- #
	// Following three functions come out of frogatto_playable.cfg
	_key_store: { type: "{string|int -> int|null}", default: {} },
    track_key: "def(string|int key_name) ->commands if(key_name in ctrl_keys, if(not key_name in _key_store, add(_key_store, {(key_name): cycle})), set(_key_store[key_name], null))",
    ctrl_keyboard: "def(string|int key_name) ->int|null if(key_name in _key_store, (cycle - (int <- _key_store[key_name])), null )",

	wasd: "['w', 'a', 's', 'd', 'q', 'e', 'c']",

	// This creates a list which may be referenced as numpad_num[n],
	//   where n is the numpad number.
	// All these big numbers are the codes for numpads, grabbed with
	//   "debug(ctrl_keys)"
	numpad_num: "[1073741922] + range(1073741913,1073741913+9)",
	
	// In order, from [0] to [4]: / * - + Enter
	idiv: "0",
	imul: "1",
	isub: "2",
	iadd: "3",

	// See below; iopp will be used to determine where in our vectors to lookup.
	
	numpad_opp: "range(1073741908,1073741908+5)",
	
	numpad_div: "numpad_opp[idiv]",
	numpad_mul: "numpad_opp[imul]",
	numpad_sub: "numpad_opp[isub]",
	numpad_add: "numpad_opp[iadd]",
	numpad_enter: "numpad_opp[4]",
	
	numpad_del: "1073741923",

	# -- Spell preparing -- #
	opp: { type: "string", default: '+' }, // set to /,*,-,or+
	iopp: "switch(opp, '/', idiv, '*', imul, '-', isub, '+', iadd)", // For use with idiv, iadd, etc.
	spell_exp: { type: "[int]", default: [1,1,1,1] }, // IMPORTANT: Must match order of idiv and co.
	spell_exp_cap: "[16,16,16,16]",	// exp stops increasing at this point

	// The only reason for keeping dec_spell_level is for the UI
	dec_spell_level: "[
			spell_exp[idiv],
			spell_exp[imul],
			spell_exp[isub],
			//if(add_lvl < spell_level_cap, add_lvl, spell_level_cap)] where
			fire_level] where		// See line 155
		add_lvl = spell_exp[iadd]^0.45",
	spell_level_cap: "3", // IMPORTANT: Redundancy here catches unexpected exp overflow issues
	spell_level: "map(dec_spell_level, value, floor(value))",
	
	arg1: { type: "int", default: 1 },
	arg2: { type: "int", default: 1 },
	answer: "switch(opp,
				'/', arg1 / arg2,
				'*', arg1 * arg2,
				'-', arg1 - arg2,
				'+', arg1 + arg2)",
	entry: { type: "string", default: ''},
	_entry: "if(entry = '', '0', entry)",
	temp: { type: "int", default: 0},

	fire1: { type: "int", default: 0 },
	fire2: { type: "int", default: 0 },
	fire3: { type: "int", default: 0 },
	// For now, we restrict the level of fire spells simply to being set via items; there is no time to make the progression balanced or avoid grinding up to high levels. (This seems like it would adversely effect the game.)
	fire_level: { type: "int", default: 0 },
	
	store_spell: "switch(iopp,
		iadd, switch(spell_level[iopp],
			1, set(fire1, 3),
			2, [set(fire1, 3), set(fire2, 2)],
			3, [set(fire1, 3), set(fire2, 2), set(fire3, 1)]
		))",
	
	create_arg: "def(int _spell_level) -> int
		if(_spell_level < 2, 1d9,	// Next line makes 100 + 1d900 if _spell_level = 3
			(10^(_spell_level-1)) + 1d( (10^_spell_level) - (10^(_spell_level-1)) ))",
	equation_to_string: "fold(map(components, value, str(value)), a+b)
		where components = [' ', arg1, '\n', opp, arg2, '\n\n', padded_entry],
		where padded_entry = fold(map(range(spell_level[iopp] - size(entry) + 1),' '), a+b) + entry",
	update_spell_exp: "set(spell_exp,dump(spell_exp[:iopp])
						+ dump([spell_exp[iopp] + if(answer = int(_entry),
							if(spell_exp[iopp] >= spell_exp_cap[iopp], 0, 1), // avoids overflow
							if(spell_exp[iopp] = 1, 0, -1))]) // avoids underflow
						+ dump(spell_exp[iopp+1:]))",
			
	init_prepare: "[set(entry, ''), animation('begin_prepare'),
			set(arg1, create_arg(spell_level[iopp])),
			set(arg2, create_arg(spell_level[iopp]))]",
	end_prepare: "[text(''),
			if (int(_entry) = answer, store_spell),
			
			update_spell_exp,
			if(time_attack, time_attack_loop, animation('look_down'))
			]",
	
	# -- Time Attack stuff here -- #
	time_attack: { type: "bool", default: false },
	time_attack_loop: "[
				if(answer = int(_entry), add(totalpower, spell_level[iopp]^2)),
				init_prepare,
				animation('begin_prepare')
					] where _entry = if(entry = '', '0', entry)",
	totalpower: { type: "int", default: 0 },
	ta_begin_cycle: { type: "int", default: 0 },
	pps: "decimal(totalpower)/(decimal(cycle - ta_begin_cycle)/50.0)", // 50 cycles = 1 second
	peak_pps: { type: "decimal", default: 0 },
	
	note: { type: "string", default:
		'You find yourself in Smoke the Magician\'s basement!\n
		Smoke\'s guards don\'t take kindly to trespassers...\n
		
		You may move with the WASD keys.\n
		Pause menu may be accessed with the ESC key.\n\n
		WARNING: YOU NEED A NUMPAD TO PLAY THIS GAME.' },
},	#### EVENTS START HERE ####

on_create: "[animation('look_down'),
			set_up_gui(),
			set(facing, 1)]",	// No flipping! Must always face the same direction
on_end_look_down_anim: "animation('look_down')",

on_start_level: "set_up_gui()",

on_change_solid_dimensions_fail: "[
	proto_event('player_controlled', 'change_solid_dimensions_fail'),
]",

# -- Player Inputs and Animations -- #
on_process: "[map(numpad_opp + numpad_num + [numpad_del] + wasd, value, track_key(value)),
	if(pps > peak_pps, set(peak_pps, pps)),
//	if(ctrl_keyboard('c') =1, fire_event('ctrl_c')),
	set(velocity_x, velocity_x/4),	// This replaces friction	
	set(velocity_y, velocity_y/4),
		
	if(not is_busy, [
		if(ctrl_keyboard(numpad_add) = 1 and spell_level[iadd] > 0,
			[set(opp, '+'), init_prepare, animation('begin_prepare')]),
		
		if(ctrl_keyboard('w'),
			[add(velocity_y, -movespeed), if(is_standing_still, animation('walk_up'))]),
		if(ctrl_keyboard('s'),
			[add(velocity_y, movespeed), if(is_standing_still, animation('walk_down'))]),			
		if(ctrl_keyboard('d'),
			[add(velocity_x, movespeed), if(is_standing_still, animation('walk_right'))]),
		if(ctrl_keyboard('a'),
			[add(velocity_x, -movespeed), if(is_standing_still, animation('walk_left'))]),
		if(ctrl_keyboard(numpad_num[1]) and not is_casting and fire1 != 0,fire_event('cast_fire1')),
		if(ctrl_keyboard(numpad_num[2]) and not is_casting and fire2 != 0,fire_event('cast_fire2')),		
		if(ctrl_keyboard(numpad_num[3]) and not is_casting and fire3 != 0,fire_event('cast_fire3')),
			]),
		]",

timer_frequency: 2,
on_timer: "[
	//Handle ending of invincibility.
	if((level.cycle - time_last_hit)/2 <= 50 and (level.cycle - time_last_hit)/2 > 1,
		set(solid_dimensions_in, ['player', 'common'])),
	if(not is_invincible_posthit, set(alpha,255), set(solid_dimensions_in, [])),
]",

on_process_walk_up: "if(not ctrl_keyboard('w'), animation('look_up'))",
on_end_walk_up_anim: "animation('walk_up')",

on_process_walk_down: "if(not ctrl_keyboard('s'), animation('look_down'))",
on_end_walk_down_anim: "animation('walk_down')",

on_process_walk_right: "if(not ctrl_keyboard('d'), animation('look_right'))",
on_end_walk_right_anim: "animation('walk_right')",

on_process_walk_left: "if(not ctrl_keyboard('a'), animation('look_left'))",
on_end_walk_left_anim: "animation('walk_left')",

/*on_process_run: "if(not (ctrl_left or ctrl_right),
					animation('stand'))",

on_end_hurt_anim: "animation('stand')",*/

# -- Spell Preparing and Casting -- #			
on_end_begin_prepare_anim: "animation('prepare')",

on_process_prepare: "[text(equation_to_string, 'numbers_gold'),
		map(range(10), value,
			if(ctrl_keyboard(numpad_num[value]) = 1 and size(entry) < 1+ size(str(arg1)),
				set(entry,str(value) + entry)
			)
		),
		if(ctrl_attack or ctrl_keyboard(numpad_del) = 1, set(entry, behead(entry)) ),
		if(ctrl_tongue or ctrl_keyboard(numpad_enter), end_prepare)]",
		
on_end_prepare_anim: "animation('prepare')",

on_cast_fire1: "[add(fire1, -1),
	if(
		facing_down, animation('cast_down'),
		facing_up, animation('cast_up'),
		facing_right, animation('cast_right'),
		facing_left, animation('cast_left')),
	spawn('mage_playable.firebolt', midpoint_x, midpoint_y, facing,
		[set(child.velocity_x, launch_x(launch_velocity)),
		set(child.velocity_y, launch_y(launch_velocity))])]",
		
on_cast_fire2: "[add(fire2, -1),
	if(
		facing_down, animation('cast_down'),
		facing_up, animation('cast_up'),
		facing_right, animation('cast_right'),
		facing_left, animation('cast_left')),
	spawn('mage_playable.fireball', midpoint_x, midpoint_y, facing,
		[set(child.velocity_x, launch_x(launch_velocity)),
		set(child.velocity_y, launch_y(launch_velocity))])]",

on_cast_fire3: "[add(fire3, -1),
	if(
		facing_down, animation('cast_down'),
		facing_up, animation('cast_up'),
		facing_right, animation('cast_right'),
		facing_left, animation('cast_left')),
	map(range(50), value,
			schedule(2d40, spawn('mage_playable.fireball_explosion',
								midpoint_x + radius*cos(angle),
								midpoint_y + radius*sin(angle), {}))
			where radius = 50 + 3d75 where angle = 1d360)]",

on_end_cast_down_anim: "animation('look_down')",
on_end_cast_up_anim: "animation('look_up')",
on_end_cast_right_anim: "animation('look_right')",
on_end_cast_left_anim: "animation('look_left')",
on_end_item_get_end_anim: "animation('look_down')",

# -- Info and Time Attack -- #			
				// Note that we do not simply call 'end_prepare', and this is because
				//  we would have to delay for a frame for the disabling of time_attack to come into effect
on_ctrl_c: "if(time_attack, [set(time_attack, false), animation('look_down'),
					text(''), set(spell_exp, [1,1,1,1])],

				[set(ta_begin_cycle, cycle), set(totalpower, 0),
				speech_dialog(level.player, [~Begin time attack?\\n(Escape skips through text.)~,
					~Forget it.~, [speech_dialog(level.player, [~Okay...~])],
				
					~Sure!~, [set(time_attack, true), set(opp, '+'), set(peak_pps, 0.0), init_prepare],
					
					~What are the controls?~, [speech_dialog(level.player,
					[~Normally, you may move around with the arrow keys.\\n<em>Not all animations are done yet!</em>~],
					[~You may begin to prepare a spell by hitting\\n<em>Numpad +</em>.~],
					[~(This only is the prepare framework;\\nYou may not truely cast spells yet.)~],
					[~To successfully prepare the spell,\\nyou must enter the arcane formula...~],
					[~...which happens to look like an addition problem.\\nDon't ask.~],
					[~Use the <em>Numpad numbers</em> to enter your answer.~],
					[~<em>Numpad delete</em> erases a digit.\\n<em>Numpad enter</em> submits.~],
					[~Go take it for a spin. Then come back here and hit <em>a</em>.~])],
								
					~What's Time Attack?~, [speech_dialog(level.player,
					[~Your goal is to try to get your Power Per Second\\nas high as you can.~],
					[~Successfully preparing spells, that is,\\nsolving problems correctly,~],
					[~will boost your total power.~],
					[~Spells grow progressively more difficult as you go,\\n
						and things get slightly easier if you mess up.~],					
					[~If you haven't, check out the controls!\\n<em>It's important!</em>~])],
										
					~What is this game?~, [speech_dialog(level.player,
					[~This is a game created by Autofire\\nfor the <em>2015 Indie Game Maker Contest</em>.~],
					[~This is a VERY early version. (The first, in fact)\\n
						Because of that, I'm looking for feedback!~],
					[~If you cannot contact me any other way,\\n
						my email address is <em>autofire555@gmail.com</em>~],
					[~Also, I'm curious to know your\\nPeak Power per Second.~])],
					
					~Other credits~, [speech_dialog(level.player,
					[~The text boxes and font comes from Frogatto.\\nI'll make another text box soon.~],
					[~The Frogatto/Anura dev group has also\npatiently answered a lot of my questions.~],
					[~Check out their game at <em>http://www.frogatto.com/</em>~])],
					
			])] // Closes speech_dialog
		)", // Closes if
#ANIMATIONS#
animation: [
	{
		"@base": true,		
		image: "characters/mage.png",
		solid_area: [7,13,18,24],		
		body_area: "all",		
		pad: 3,
	},

	# -- Walking and Looking -- #
	{
		id: "look_down",		
		rect: [90, 3, 115, 27],
		frames: 1,
		frames_per_row: 8,
		duration: 6,
	},

	{
		id: "look_up",
		rect: [208, 3, 233, 28],
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "look_right",
		rect: [90, 34, 115, 59],
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},

	{
		id: "look_left",
		rect: [150, 34, 175, 59],
		frames: 1,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "walk_down",
		rect: [3, 3, 28, 28],
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},
	
	{
		id: "walk_up",
		rect: [121, 3, 146, 28],
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},

	{
		id: "walk_right",
		rect: [3, 34, 28, 59],
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},
	
	{
		id: "walk_left",
		rect: [121, 34, 146, 59],
		frames: 4,
		frames_per_row: 4,
		duration: 9,
	},

	# -- Magic Weilding -- #			
	{
		id: "begin_prepare",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},
	
	{
		id: "prepare",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
	
	{
		id: "cast_down",
		rect: [61, 65, 86, 90],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
		//duration: 12,
	},
	
	{
		id: "cast_up",
		rect: [150, 65, 175, 90],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	
	{
		id: "cast_right",
		rect: [61, 94, 86, 119],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	
	{
		id: "cast_left",
		rect: [150, 94, 175, 119],
		frames: 1,
		frames_per_row: 3,
		duration: 20,
	},
	# -- Items -- #			
	{
		id: "item_get_begin",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},	
				
	{
		id: "item_get_end",
		rect: [3, 3, 27, 27],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},
],

object_type: [
{
		id: "prepare_spell_dialogue",
		// This will get filled out later, when a
		// more user friendly dialogue is worked out.
		//
		// This object will create several text objects, and then
		// this object will die when those objects are done.
		//   (killing the text objects in the process.)
},
	
{
	id: "firebolt",
	dies_on_inactive: true,
	timer_frequency: 450,
	object_level_collisions: true,
	solid_dimensions: ["enemy"],
	collide_dimensions: ["enemy"],
	prototype: ["shot"],
	properties: {
	        attack_damage: "2",
	        team: "'player'",
	},
	
	on_end_normal_anim: "animation('normal')",
	on_process: "if((time_in_animation%7) = 0, spawn('mage_playable.firebolt_trail',midpoint_x,midpoint_y,{velocity_x:0,velocity_y:0}))",
	on_end_flash_anim: "die()",
	on_timer: "die()",
	animation:
		{
		id: "normal",
		image: "effects/magic_fire.png",
		attack_area: [0,0,11,11],
		pad: 3,
		rect: [2,2,10,10],
		frames: 4,
		frames_per_row: 4,
		duration: 5
	    },
},
	
{
	id: "firebolt_trail",
	ignore_collide: true,
	on_end_normal_anim: "die()",
    
	zorder: -5,
	dies_on_inactive: true,
	on_spawned: "animation('normal')",

	animation:
	    {
		id: "normal",
		image: "effects/magic_fire.png",
		pad: 3,
		rect: [2, 14, 6, 18],
		frames: 4,
		frames_per_row: 5,
		duration: 4,
		x_accel: 0,
		y_accel: 0
	    },
},
	
{
	id: "fireball",
	dies_on_inactive: true,
	timer_frequency: 450,
	object_level_collisions: true,
	solid_dimensions: ["enemy"],	
	collide_dimensions: ["enemy"],
	prototype: ["shot"],
	properties: {
	        attack_damage: "1",
	        team: "'player'",
	},
	
	on_create: "[if(
		velocity_x > 0, set(facing, 1),
		velocity_x < 0, [set(facing, -1), add(x, -20)],
		velocity_y < 0, [animation('normalup'), add(x, -7), add(y, -15)],
		velocity_y > 0, [animation('normaldown'), add(x, -9), add(y, 13)],
		0),
		if(velocity_y != 0, add(x, 0))]",
	on_end_normal_anim: "animation('normal')",	
	on_end_normalup_anim: "animation('normalup')",
	on_end_normaldown_anim: "animation('normaldown')",
	on_end_flash_anim: "die()",
	on_timer: "die()",
	
//	on_die: "spawn('mage_playable.fireball_explosion',midpoint_x,midpoint_y,{velocity_x:0,velocity_y:0})",
	on_die: "spawn('mage_playable.fireball_explosion',midpoint_x,midpoint_y, {},
		[map(range(8), value,
			schedule(1d8, spawn('mage_playable.fireball_explosion',midpoint_x + radius*cos(value*45),midpoint_y + radius*sin(value*45), {}))
		where radius = 55)
	])",
	
	animation: [
		{
		id: "normal",
		image: "effects/magic_fire.png",		
		attack_area: [7,-1,16,7],
		solid_area: [9,1,14,5],
		pad: 2,
		rect: [2,22,17,30],
		frames: 3,
		frames_per_row: 4,
		duration: 5
	    },
	    
		{
		id: "normalup",
		image: "effects/magic_fire.png",		
		attack_area: [-1,-2,9,7],
		solid_area: [1,0,7,5],
		pad: 1,
		rect: [118,1,126,17],
		frames: 3,
		frames_per_row: 1,
		duration: 5
	    },
	    
		{
		id: "normaldown",
		image: "effects/magic_fire.png",		
		attack_area: [-1,8,9,17],
		solid_area: [1,10,7,15],
		pad: 1,
		rect: [108,1,116,17],
		frames: 3,
		frames_per_row: 1,
		duration: 5
	    },	    
	]
},

{
	id: "fireball_explosion",
	prototype: ["hittable"],
	solid_dimensions: ["enemy"],	
	collide_dimensions: ["enemy"],
	on_end_normal_anim: "die()",
    
	zorder: 50,
	dies_on_inactive: true,
	on_spawned: "[animation('normal'), set(custom_draw, [1.0, 2.0, 3.0, 4.0, [v,-v], [v,v], [-v,v], [-v,-v]]) where v = 0]",
	properties: {
	        attack_damage: "1",
	        team: "'player'",
	        damage_cooldown: "6",
	},

	animation:
	    {
		id: "normal",
		image: "effects/magic_fire.png",		
//		attack_area: [-14,-14,36,36],	// Center is 11
		attack_area: [0,-1,22,22],
		pad: 2,
		rect: [2,34,24,56],
		frames: 4,
		frames_per_row: 4,
		duration: 2,
		y_accel: 0
	    },
},
],

}
