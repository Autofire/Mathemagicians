# magician_playable.cfg
# The player character

{

#DEFINES#
id: "magician_playable",
prototype: ["player_controlled"],
editor_info: { category: "Characters" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","enemy","boss"],
vehicle: false,
hitpoints: 20,
mass: 5,
is_human: true,
friction: 22000,

zorder: "@include data/zorder.cfg:player",

properties: {
	walkspeed: 500,
	runspeed: 1000,
	movespeed: "if(ctrl_tongue = true, runspeed, walkspeed)",
	
	flinch_threshold: 0,
	hurt_velocity_y: "-1100",
	hurt_velocity_x: "250",
	cycle_of_last_up: { type: "int", default: 0 },
	
	# -- gui -- #
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27+0, 27+0, {})",
		persistent: false,
	},
	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display]
	]",
		
		
	# -- functions -- #
	# Overloading (from hittable) because we want to flinch in air #
	handle_flinch: "def(obj hittable collide_with) -> commands
			execute(me, if(final_damage_amount(collide_with, collide_with.attack_damage) >= flinch_threshold, cause_flinch(collide_with)))",

	# -- Extra keybinds -- #
	// Following three functions come out of frogatto_playable.cfg
	_key_store: { type: "{string|int -> int|null}", default: {} },
    track_key: "def(string|int key_name) ->commands if(key_name in ctrl_keys, if(not key_name in _key_store, add(_key_store, {(key_name): cycle})), set(_key_store[key_name], null))",
    ctrl_keyboard: "def(string|int key_name) ->int|null if(key_name in _key_store, (cycle - (int <- _key_store[key_name])), null )",

	// This creates a list which may be referenced as numpad_num[n],
	//   where n is the numpad number.
	// All these big numbers are the codes for numpads, grabbed with
	//   "debug(ctrl_keys)"
	numpad_num: "[1073741922] + range(1073741913,1073741913+9)",
	
	// In order, from [0] to [4]: / * - + Enter
	numpad_opp: "range(1073741908,1073741908+5)",
	
	numpad_div: "numpad_opp[0]",
	numpad_mul: "numpad_opp[1]",
	numpad_sub: "numpad_opp[2]",
	numpad_add: "numpad_opp[3]",
	numpad_enter: "numpad_opp[4]",
	
	numpad_del: "1073741923",
	
	# -- String Manipulation -- #
	// This stuff is used mainly when erasing part of the user's entry
	// When entering left to right, we want tail. If right to left, then behead.
	tail: "def(string input) -> string
		input[:size(input)-1]",	// Drop last element
	behead: "def(string input) -> string
		input[1:]",				// Drop first
	
	# -- Spell preparing -- #
	add_exp: { type: "int", default: 1 },
	sub_exp: { type: "int", default: 1 },
	mul_exp: { type: "int", default: 1 },
	div_exp: { type: "int", default: 1 },
	
	add_ramp: "0.5",
	
	add_level: "floor(add_exp^add_ramp)",
	
	arg1: { type: "int", default: 1 },
	arg2: { type: "int", default: 1 },
	opp: { type: "string", default: '+' },
	answer: "switch(opp,
				'+', arg1 + arg2,
				'-', arg1 - arg2,
				'x', arg1 * arg2,
				'/', arg1 / arg2)",
	entry: { type: "string", default: ''},
	temp: { type: "int", default: 0},
	
	create_arg: "def(int spell_level) -> int
		if(spell_level < 2, 1d9,	// Next line makes 100 + 1d900 if spell_level = 3
			(10^(spell_level-1)) + 1d( (10^spell_level) - (10^(spell_level-1)) ))",
	equation_to_string: "def(int a, string opp, int b) -> string
			fold(map([arg1, opp, arg2, '=', entry], str(value)), a+b)",
	init_prepare: "[set(entry,''),
			set(arg1, create_arg(add_level)),
			set(arg2, create_arg(add_level))]",
	end_prepare: "[text(''),
			debug(abs(int(entry) - answer)),
			add(add_exp, if(answer = int(entry), 1, -1))]",
},

#ANIMATION HANDLES#
on_create: "[animation('stand'),
			set_up_gui(),
			set(facing, 1)]",	// No flipping! Must always face the same direction
on_end_stand_anim: "animation('stand')",

# -- stuff that is related to the player's input follows
on_process: "[
			if(ctrl_up = true, set(velocity_y, -movespeed)),
			if(ctrl_down = true, set(velocity_y, movespeed)),
			if(ctrl_left = true, set(velocity_x, -movespeed)),
			if(ctrl_right = true, set(velocity_x, movespeed)),
			]",

/*on_process_run: "if(not (ctrl_left or ctrl_right),
					animation('stand'))",
on_end_run_anim: "animation('run')",
on_end_hurt_anim: "animation('stand')",*/

# -- Spell Preparing and Casting -- #
on_ctrl_jump: "if(animation != 'prepare',
			[animation('prepare'), init_prepare],
			[animation('stand'), end_prepare])",
			
on_process_prepare: "[text(equation_to_string(arg1, opp, arg2)),
		map(numpad_num + [numpad_del], value, track_key(value)),
		map(range(10), value,
			if(ctrl_keyboard(numpad_num[value]) = 1, set(entry,entry + str(value)))),
		if(ctrl_keyboard(numpad_del) = 1, set(entry, tail(entry)) )
		/*debug(ctrl_keys)*/]",
		
on_end_prepare: "animation('prepare')",

# -- Jumping and falling -- #
on_ctrl_tongue: "if(cycle_of_last_up + 20 < cycle,
			set(cycle_of_last_up, cycle),
			speech_dialog(level.player,
		[~No info for you!~],
		))",

#ANIMATIONS#
animation: [
	{
		id: "stand",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 8,
		pad: 3,
		duration: 6,
	},
	
	{
		id: "run",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
	
	{
		id: "prepare",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
],

object_type: [
	{
		id: "prepare_spell_dialogue",
		// This will get filled out later, when a
		// more user friendly dialogue is worked out.
		//
		// This object will create several text objects, and then
		// this object will die when those objects are done.
		//   (killing the text objects in the process.)
	},
]
}
