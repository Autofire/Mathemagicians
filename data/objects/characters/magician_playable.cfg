# magician_playable.cfg
# The player character

{

#DEFINES#
id: "magician_playable",
prototype: ["player_controlled"],
editor_info: { category: "Characters" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","enemy","boss"],
vehicle: false,
hitpoints: 20,
mass: 5,
is_human: true,
friction: 22000,

zorder: "@include data/zorder.cfg:player",

properties: {
	walkspeed: 500,
	runspeed: 1000,
	movespeed: "if(ctrl_tongue = true, runspeed, walkspeed)",
	
	flinch_threshold: 0,
	hurt_velocity_y: "-1100",
	hurt_velocity_x: "250",
	cycle_of_last_up: { type: "int", default: 0 },
	
	# -- gui -- #
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27+0, 27+0, {})",
		persistent: false,
	},
	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display]
	]",
		
		
	# -- functions -- #
	# Overloading (from hittable) because we want to flinch in air #
	handle_flinch: "def(obj hittable collide_with) -> commands
			execute(me, if(final_damage_amount(collide_with, collide_with.attack_damage) >= flinch_threshold, cause_flinch(collide_with)))",
	
    _key_store: { type: "{string|int -> int|null}", default: {} },
    track_key: "def(string|int key_name) ->commands if(key_name in ctrl_keys, if(not key_name in _key_store, add(_key_store, {(key_name): cycle})), set(_key_store[key_name], null))",
    ctrl_keyboard: "def(string|int key_name) ->int|null if(key_name in _key_store, (cycle - (int <- _key_store[key_name])), null )",

	
	# Spell preparing #
	arg1: { type: "int", default: 1 },
	arg2: { type: "int", default: 1 },
	opp: { type: "string", default: "+" },
	result: "arg1 + arg2",
	entry: { type: "int", default: 1},
	
	// This creates a list which may be referenced as numpad_num[n],
	// where n is the numpad number.
	numpad_num: "[1073741922] + range(1073741913,1073741913+9)",
	
	equation_to_string: "def(int a, string opp, int b) -> string
			fold(map([arg1, opp, arg2, '='], str(value)), a+b)",
},

#ANIMATION HANDLES#
on_create: "[animation('stand'),
			set_up_gui(),
			set(facing, 1)]",	// No flipping! Must always face the same direction
on_end_stand_anim: "animation('stand')",

# -- stuff that is related to the player's input follows
on_process: "[
			if(ctrl_up = true, set(velocity_y, -movespeed)),
			if(ctrl_down = true, set(velocity_y, movespeed)),
			if(ctrl_left = true, set(velocity_x, -movespeed)),
			if(ctrl_right = true, set(velocity_x, movespeed)),
			]",

/*on_process_run: "if(not (ctrl_left or ctrl_right),
					animation('stand'))",
on_end_run_anim: "animation('run')",
on_end_hurt_anim: "animation('stand')",*/

# -- Spell Preparing and Casting -- #
on_ctrl_jump: "animation('spell_prepare')",
on_process_spell_prepare: "[text(equation_to_string(arg1, opp, arg2)),
		map(numpad_num, value, track_key(value)),
		map(range(10), value, if(ctrl_keyboard(numpad_num[value]) = 1, debug(value))),
		/*debug(ctrl_keys),*/]",
on_end_spell_prepare: "animation('spell_prepare')",

# -- Jumping and falling -- #
on_ctrl_tongue: "if(cycle_of_last_up + 20 < cycle,
			set(cycle_of_last_up, cycle),
			speech_dialog(level.player,
		[~No info for you!~],
		))",

#ANIMATIONS#
animation: [
	{
		id: "stand",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 8,
		pad: 3,
		duration: 6,
	},
	
	{
		id: "run",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
	
	{
		id: "spell_prepare",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
],

object_type: [
	{
		id: "prepare_spell_dialogue",
		
	},
]
}
