# magician_playable.cfg
# The player character
# Search for IMPORTANT before making any big changes
# TODO:
# Red: Create proper spell prepare UI
# Yellow: write code that helps get player around edges.
# Yellow: Repair walk left animation

{

#DEFINES#
id: "magician_playable",
prototype: ["player_controlled"],
editor_info: { category: "Characters" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","energy","boss"],
vehicle: false,
has_feet: false,
feet_width: null,
hitpoints: 20,
mass: 5,
is_human: true,
friction: 22000,

zorder: "@include data/zorder.cfg:player",

properties: {
	walkspeed: 300,
	runspeed: 1000,
	//movespeed: "if(ctrl_tongue = true, runspeed, walkspeed)",
	movespeed: "walkspeed",
	//movespeed: 3,
	
	flinch_threshold: 0,
	hurt_velocity_y: "-1100",
	hurt_velocity_x: "250",
	cycle_of_last_up: { type: "int", default: 0 },
	
	# -- gui -- #
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27+0, 27+0, {})",
		persistent: false,
	},
	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display]
	]",
	
	# -- String and List Manipulation -- #
	// This stuff is used mainly when erasing part of the user's entry
	// When entering left to right, we want tail. If right to left, then behead.
	tail: "def(string input) -> string
		if(input != '', input[:size(input)-1], input)",	// Drop last element
	behead: "def(string input) -> string
		input[1:]",				// Drop first
	
	// Doesn't seem to work
	set_list: "def(list inlist, int index, any value) -> list
		inlist[:index] + [value] + inlist[index+1:]",
	
	# -- Animation Groupings and Directional Helpers -- #
	is_standing_still: "bool :: bool(self.animation in
		['look_up', 'look_down', 'look_left', 'look_right'])",
	is_casting: "bool :: bool(self.animation in
		['cast_up', 'cast_down', 'cast_left', 'cast_right'])",
	
	facing_down: "bool :: bool(self.animation in ['look_down', 'walk_down', 'cast_down'])",
	facing_up: "bool :: bool(self.animation in ['look_up', 'walk_up', 'cast_up'])",
	facing_right: "bool :: bool(self.animation in ['look_right', 'walk_right', 'cast_right'])",
	facing_left: "bool :: bool(self.animation in ['look_left', 'walk_left', 'cast_left'])",
	
	// These functions return the proper velocities depending on direction
	launch_x: "def(int velocity) -> int
		if(facing_right, velocity,
		   facing_left, -velocity,
		   0)",
	launch_y: "def(int velocity) -> int
		if(facing_down, velocity,
		   facing_up, -velocity,
		   0)",
	
	// We'll remember the facing just in case we need to restore it later
	remembered_facing: { type: "string", default: 'down' },
	store_facing: "if(
		facing_down, set(remembered_facing, 'down'),
		facing_up, set(remembered_facing, 'up'),
		facing_right, set(remembered_facing, 'right'),
		facing_left, set(remembered_facing, 'left'))",
	restore_facing: "switch(remembered_facing,
		'down', animation('look_down'),
		'up', animation('look_up'),
		'right', animation('look_right'),
		'left', animation('look_left'),)",

	# -- Extra keybinds -- #
	// Following three functions come out of frogatto_playable.cfg
	_key_store: { type: "{string|int -> int|null}", default: {} },
    track_key: "def(string|int key_name) ->commands if(key_name in ctrl_keys, if(not key_name in _key_store, add(_key_store, {(key_name): cycle})), set(_key_store[key_name], null))",
    ctrl_keyboard: "def(string|int key_name) ->int|null if(key_name in _key_store, (cycle - (int <- _key_store[key_name])), null )",

	wasd: "['w', 'a', 's', 'd', 'q', 'e', 'x']",

	// This creates a list which may be referenced as numpad_num[n],
	//   where n is the numpad number.
	// All these big numbers are the codes for numpads, grabbed with
	//   "debug(ctrl_keys)"
	numpad_num: "[1073741922] + range(1073741913,1073741913+9)",
	
	// In order, from [0] to [4]: / * - + Enter
	idiv: "0",
	imul: "1",
	isub: "2",
	iadd: "3",

	// See below; iopp will be used to determine where in our vectors to lookup.
	
	numpad_opp: "range(1073741908,1073741908+5)",
	
	numpad_div: "numpad_opp[idiv]",
	numpad_mul: "numpad_opp[imul]",
	numpad_sub: "numpad_opp[isub]",
	numpad_add: "numpad_opp[iadd]",
	numpad_enter: "numpad_opp[4]",
	
	numpad_del: "1073741923",

	# -- Spell preparing -- #
	opp: { type: "string", default: '+' }, // set to /,*,-,or+
	iopp: "switch(opp, '/', idiv, '*', imul, '-', isub, '+', iadd)", // For use with idiv, iadd, etc.
	spell_exp: { type: "[int]", default: [1,1,1,1] }, // IMPORTANT: Must match order of idiv and co.
	spell_exp_cap: "[16,16,16,16]",	// exp stops increasing at this point
	spell_level: "[
				spell_exp[idiv],
				spell_exp[imul],
				spell_exp[isub],
				if(add_lvl < level_cap, add_lvl, level_cap)] where
			add_lvl = floor(spell_exp[iadd]^0.45),
			level_cap = 3", // IMPORTANT: Redundancy here catches unexpected exp overflow issues

	// This is the prepare level the player has chosen; cannot exceed spell level
	cast_level: { type: "int", default: 1 },
	
	arg1: { type: "int", default: 1 },
	arg2: { type: "int", default: 1 },
	answer: "switch(opp,
				'/', arg1 / arg2,
				'*', arg1 * arg2,
				'-', arg1 - arg2,
				'+', arg1 + arg2)",
	entry: { type: "string", default: ''},
	_entry: "if(entry = '', '0', entry)",
	temp: { type: "int", default: 0},

	fire1: { type: "int", default: 0 },
	fire2: { type: "int", default: 0 },
	fire3: { type: "int", default: 0 },
	store_spell: "switch(iopp,
		iadd, switch(spell_level[iopp],
			1, set(fire1, 3),
			2, set(fire2, 1),
			3, set(fire3, 1)
		)
	)",
	
	create_arg: "def(int _spell_level) -> int
		if(_spell_level < 2, 1d9,	// Next line makes 100 + 1d900 if _spell_level = 3
			(10^(_spell_level-1)) + 1d( (10^_spell_level) - (10^(_spell_level-1)) ))",
	equation_to_string: "fold(map([arg1, opp, arg2, '=', if(entry = '', '_', entry)],
		str(value)), a+b)",
	update_spell_exp: "set(spell_exp,spell_exp[:iopp]
						+ [spell_exp[iopp]
						+ if(answer = int(_entry),
							if(spell_exp[iopp] >= spell_exp_cap[iopp], 0, 1), // avoids overflow
							if(spell_exp[iopp] = 1, 0, -1))] // avoids underflow
						+ spell_exp[iopp+1:])",
			
	init_prepare: "[set(entry, ''), animation('begin_prepare'),
			set(arg1, create_arg(spell_level[iopp])),
			set(arg2, create_arg(spell_level[iopp]))]",
	end_prepare: "[text(''),
			if (int(_entry) = answer,
				[debug('Right!'), store_spell],
				debug('Wrong!')),
			
			update_spell_exp,
			if(time_attack, time_attack_loop, animation('look_down'))
			]",
	
	# -- Time Attack stuff here -- #
	time_attack: { type: "bool", default: false },
	time_attack_loop: "[
				if(answer = int(_entry), add(totalpower, spell_level[iopp]^2)),
				init_prepare,
				animation('begin_prepare')
					] where _entry = if(entry = '', '0', entry)",
	totalpower: { type: "int", default: 0 },
	ta_begin_cycle: { type: "int", default: 0 },
	pps: "decimal(totalpower)/(decimal(cycle - ta_begin_cycle)/50.0)", // 50 cycles = 1 second
	peak_pps: { type: "decimal", default: 0 },
	
},	#### EVENTS START HERE ####

on_create: "[animation('look_down'),
			set_up_gui(),
			set(facing, 1)]",	// No flipping! Must always face the same direction
on_end_look_down_anim: "animation('look_down')",

# -- Player Inputs and Animations -- #
on_process: "[map(numpad_opp + numpad_num + [numpad_del] + wasd, value, track_key(value)),
			if(is_standing, add(y,-1)), // This is a work around for a glitch
			if(pps > peak_pps, set(peak_pps, pps)),
			
			if(animation != 'prepare', [
				if(ctrl_keyboard(numpad_add) = 1,
					[set(opp, '+'), init_prepare, animation('begin_prepare')]),
				
				if(ctrl_keyboard('w'),
					[add(velocity_y, -movespeed), if(is_standing_still, animation('walk_up'))]),
				if(ctrl_keyboard('s'),
					[add(velocity_y, movespeed), if(is_standing_still, animation('walk_down'))]),
				if(ctrl_keyboard('d'),
					[add(velocity_x, movespeed), if(is_standing_still, animation('walk_right'))]),
				if(ctrl_keyboard('a'),
					[add(velocity_x, -movespeed), if(is_standing_still, animation('walk_left'))]),
				if(ctrl_keyboard(numpad_num[1]) and not is_casting and fire1 != 0,
					fire_event('cast_fire1')),
				if(ctrl_keyboard('x') =1, fire_event('ctrl_x'))
				]),
			]",

on_process_walk_up: "if(not ctrl_keyboard('w'), animation('look_up'))",
on_end_walk_up_anim: "animation('walk_up')",

on_process_walk_down: "if(not ctrl_keyboard('s'), animation('look_down'))",
on_end_walk_down_anim: "animation('walk_down')",

on_process_walk_right: "if(not ctrl_keyboard('d'), animation('look_right'))",
on_end_walk_right_anim: "animation('walk_right')",

on_process_walk_left: "if(not ctrl_keyboard('a'), animation('look_left'))",
on_end_walk_left_anim: "animation('walk_left')",

/*on_process_run: "if(not (ctrl_left or ctrl_right),
					animation('stand'))",

on_end_hurt_anim: "animation('stand')",*/

# -- Spell Preparing and Casting -- #			
on_end_begin_prepare_anim: "animation('prepare')",

on_process_prepare: "[text(equation_to_string),
		map(range(10), value,
			if(ctrl_keyboard(numpad_num[value]) = 1, set(entry,entry + str(value)))),
		if(ctrl_attack or ctrl_keyboard(numpad_del) = 1, set(entry, tail(entry)) ),
		//debug('Hello'),
		if(ctrl_tongue or ctrl_keyboard(numpad_enter), end_prepare)]",
		
on_end_prepare_anim: "animation('prepare')",

on_cast_fire1: "[add(fire1, -1),
	if(
		facing_down, animation('cast_down'),
		facing_up, animation('cast_up'),
		facing_right, animation('cast_right'),
		facing_left, animation('cast_left')),
	spawn('magician_playable.firebolt', midpoint_x, midpoint_y, facing,
		[set(child.velocity_x, launch_x(750)),
		set(child.velocity_y, launch_y(750))])]",

on_end_cast_down_anim: "animation('look_down')",
on_end_cast_up_anim: "animation('look_up')",
on_end_cast_right_anim: "animation('look_right')",
on_end_cast_left_anim: "animation('look_left')",

# -- Info and Time Attack -- #
/*on_ctrl_jump: "if(cycle_of_last_up + 20 < cycle,
			set(cycle_of_last_up, cycle),*/
			
				// Note that we do not simply call 'end_prepare', and this is because
				//  we would have to delay for a frame for the disabling of time_attack to come into effect
on_ctrl_x: "if(time_attack, [set(time_attack, false), animation('look_down'),
					text(''), set(spell_exp, [1,1,1,1])],

				[set(ta_begin_cycle, cycle), set(totalpower, 0),
				speech_dialog(level.player, [~Begin time attack?\\n(Escape skips through text.)~,
					~Forget it.~, [speech_dialog(level.player, [~Okay...~])],
				
					~Sure!~, [set(time_attack, true), set(opp, '+'), set(peak_pps, 0.0), init_prepare],
					
					~What are the controls?~, [speech_dialog(level.player,
					[~Normally, you may move around with the arrow keys.\\n<em>Not all animations are done yet!</em>~],
					[~You may begin to prepare a spell by hitting\\n<em>Numpad +</em>.~],
					[~(This only is the prepare framework;\\nYou may not truely cast spells yet.)~],
					[~To successfully prepare the spell,\\nyou must enter the arcane formula...~],
					[~...which happens to look like an addition problem.\\nDon't ask.~],
					[~Use the <em>Numpad numbers</em> to enter your answer.~],
					[~<em>Numpad delete</em> erases a digit.\\n<em>Numpad enter</em> submits.~],
					[~Go take it for a spin. Then come back here and hit <em>a</em>.~])],
								
					~What's Time Attack?~, [speech_dialog(level.player,
					[~Your goal is to try to get your Power Per Second\\nas high as you can.~],
					[~Successfully preparing spells, that is,\\nsolving problems correctly,~],
					[~will boost your total power.~],
					[~Spells grow progressively more difficult as you go,\\n
						and things get slightly easier if you mess up.~],					
					[~If you haven't, check out the controls!\\n<em>It's important!</em>~])],
										
					~What is this game?~, [speech_dialog(level.player,
					[~This is a game created by Autofire\\nfor the <em>2015 Indie Game Maker Contest</em>.~],
					[~This is a VERY early version. (The first, in fact)\\n
						Because of that, I'm looking for feedback!~],
					[~If you cannot contact me any other way,\\n
						my email address is <em>autofire555@gmail.com</em>~],
					[~Also, I'm curious to know your\\nPeak Power per Second.~])],
					
					~Other credits~, [speech_dialog(level.player,
					[~The text boxes and font comes from Frogatto.\\nI'll make another text box soon.~],
					[~The Frogatto/Anura dev group has also\npatiently answered a lot of my questions.~],
					[~Check out their game at <em>http://www.frogatto.com/</em>~])],
					
			])] // Closes speech_dialog
		)", // Closes if
#ANIMATIONS#
animation: [

	# -- Walking and Looking -- #
	{
		id: "look_down",
		body_area: "all",
		image: "characters/magician.png",
		rect: [90, 3, 115, 27],
		solid_area: [7,12,18,23],
		frames: 1,
		frames_per_row: 8,
		pad: 3,
		duration: 6,
	},

	{
		id: "look_up",
		body_area: "all",
		image: "characters/magician.png",
		rect: [208, 3, 233, 28],
		solid_area: [7,12,18,23],
		frames: 1,
		pad: 3,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "look_right",
		body_area: "all",
		image: "characters/magician.png",
		rect: [90, 34, 115, 59],
		solid_area: [7,13,18,24],
		frames: 1,
		pad: 3,
		frames_per_row: 4,
		duration: 8,
	},

	{
		id: "look_left",
		body_area: "all",
		image: "characters/magician.png",
		rect: [150, 34, 175, 59],
		solid_area: [7,13,18,24],
		frames: 1,
		pad: 3,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "walk_down",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 28, 28],
		solid_area: [7,12,18,23],
		frames: 4,
		pad: 3,
		frames_per_row: 4,
		duration: 9,
	},
	
	{
		id: "walk_up",
		body_area: "all",
		image: "characters/magician.png",
		rect: [121, 3, 146, 28],
		solid_area: [7,12,18,23],
		frames: 4,
		pad: 3,
		frames_per_row: 4,
		duration: 9,
	},

	{
		id: "walk_right",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 34, 28, 59],
		solid_area: [7,13,18,24],
		frames: 4,
		pad: 3,
		frames_per_row: 4,
		duration: 9,
	},
	
	{
		id: "walk_left",
		body_area: "all",
		image: "characters/magician.png",
		rect: [121, 34, 146, 59],
		solid_area: [7,13,18,24],
		frames: 4,
		pad: 3,
		frames_per_row: 4,
		duration: 9,
	},

	# -- Magic Weilding -- #			
	{
		id: "begin_prepare",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [7,12,18,23],
		frames: 1,
		frames_per_row: 1,
		duration: 25,
	},
	
	{
		id: "prepare",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [7,12,18,23],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
	
	{
		id: "cast_down",
		body_area: "all",
		image: "characters/magician.png",
		//rect: [3, 65, 28, 90],
		rect: [61, 65, 86, 90],
		solid_area: [7,12,18,23],
		frames: 1,
		pad: 3,
		frames_per_row: 3,
		duration: 12,
	},
	
	{
		id: "cast_up",
		body_area: "all",
		image: "characters/magician.png",
		rect: [150, 65, 175, 90],
		solid_area: [7,12,18,23],
		frames: 1,
		pad: 3,
		frames_per_row: 3,
		duration: 12,
	},
	
	{
		id: "cast_right",
		body_area: "all",
		image: "characters/magician.png",
		rect: [61, 94, 86, 119],
		solid_area: [7,12,18,23],
		frames: 1,
		pad: 3,
		frames_per_row: 3,
		duration: 12,
	},
	
	{
		id: "cast_left",
		body_area: "all",
		image: "characters/magician.png",
		rect: [150, 94, 175, 119],
		solid_area: [7,12,18,23],
		frames: 1,
		pad: 3,
		frames_per_row: 3,
		duration: 12,
	},
],

object_type: [
	{
		id: "prepare_spell_dialogue",
		// This will get filled out later, when a
		// more user friendly dialogue is worked out.
		//
		// This object will create several text objects, and then
		// this object will die when those objects are done.
		//   (killing the text objects in the process.)
	},
	
	{
	id: "firebolt",
	dies_on_inactive: true,
	timer_frequency: 450,
	object_level_collisions: true,
	solid_dimensions: ["enemy"],
	prototype: ["shot"],
	properties: {
	#       attack_damage: "if(level.player.difficulty <= level.player.difficulty_casual,1,2)",
	        attack_damage: "1",
	        team: "'player'",
	},

	on_end_normal_anim: "animation('normal')",
	on_process: "if((time_in_animation%7) = 0, spawn('magician_playable.firebolt_trail',midpoint_x,midpoint_y,{velocity_x:0,velocity_y:0}))",
	on_end_flash_anim: "die()",
	on_timer: "die()",

	animation:
		{
		id: "normal",
		image: "effects/magic_fire.png",
		attack_area: [0,0,11,11],
		pad: 3,
		rect: [2,2,10,10],
		frames: 4,
		frames_per_row: 4,
		duration: 5
	    },
	},


	{
	id: "firebolt_trail",
	ignore_collide: true,
	on_end_normal_anim: "die()",
    
	zorder: 50,
	dies_on_inactive: true,
	on_spawned: "animation('normal')",

	animation:
	    {
		id: "normal",
		image: "effects/magic_fire.png",
		pad: 3,
		rect: [2, 14, 6, 18],
		frames: 4,
		frames_per_row: 5,
		duration: 4,
		x_accel: 0,
		y_accel: 0
	    },
	}
],

}
