# magician_playable.cfg
# The player character
# Search for IMPORTANT before making any big changes

{

#DEFINES#
id: "magician_playable",
prototype: ["player_controlled"],
editor_info: { category: "Characters" },
solid_dimensions: ["player","common","boss"],
collide_dimensions: ["common","enemy","boss"],
vehicle: false,
hitpoints: 20,
mass: 5,
is_human: true,
friction: 22000,

zorder: "@include data/zorder.cfg:player",

properties: {
	walkspeed: 500,
	runspeed: 1000,
	movespeed: "if(ctrl_tongue = true, runspeed, walkspeed)",
	
	flinch_threshold: 0,
	hurt_velocity_y: "-1100",
	hurt_velocity_x: "250",
	cycle_of_last_up: { type: "int", default: 0 },
	
	# -- gui -- #
	gui_heart_display: {
		type: "obj heart_display",
		init: "object('heart_display', 27+0, 27+0, {})",
		persistent: false,
	},
	
	set_up_gui: "def() -> commands [
		map(components,
			'gui_element', [
				remove_object(gui_element),
				add_object(gui_element),
			]
		) where components = [gui_heart_display]
	]",
	
	# -- String and List Manipulation -- #
	// This stuff is used mainly when erasing part of the user's entry
	// When entering left to right, we want tail. If right to left, then behead.
	tail: "def(string input) -> string
		input[:size(input)-1]",	// Drop last element
	behead: "def(string input) -> string
		input[1:]",				// Drop first
	
	// Doesn't seem to work
	set_list: "def(list inlist, int index, any value) -> list
		inlist[:index] + [value] + inlist[index+1:]",
	
	# -- Animation Groupings -- #
	is_doing_nothing: "bool :: bool(self.animation in
		['look_up', 'look_down', 'look_left', 'look_right'])",

	# -- Extra keybinds -- #
	// Following three functions come out of frogatto_playable.cfg
	_key_store: { type: "{string|int -> int|null}", default: {} },
    track_key: "def(string|int key_name) ->commands if(key_name in ctrl_keys, if(not key_name in _key_store, add(_key_store, {(key_name): cycle})), set(_key_store[key_name], null))",
    ctrl_keyboard: "def(string|int key_name) ->int|null if(key_name in _key_store, (cycle - (int <- _key_store[key_name])), null )",

	// This creates a list which may be referenced as numpad_num[n],
	//   where n is the numpad number.
	// All these big numbers are the codes for numpads, grabbed with
	//   "debug(ctrl_keys)"
	numpad_num: "[1073741922] + range(1073741913,1073741913+9)",
	
	// In order, from [0] to [4]: / * - + Enter
	idiv: "0",
	imul: "1",
	isub: "2",
	iadd: "3",

	// See below; iopp will be used to determine where in our vectors to lookup.
	
	numpad_opp: "range(1073741908,1073741908+5)",
	
	numpad_div: "numpad_opp[idiv]",
	numpad_mul: "numpad_opp[imul]",
	numpad_sub: "numpad_opp[isub]",
	numpad_add: "numpad_opp[iadd]",
	numpad_enter: "numpad_opp[4]",
	
	numpad_del: "1073741923",

	# -- Spell preparing -- #
	opp: { type: "string", default: '+' }, // set to /,*,-,or+
	iopp: "switch(opp, '/', idiv, '*', imul, '-', isub, '+', iadd)", // For use with idiv, iadd, etc.
	spell_exp: { type: "[int]", default: [1,1,1,1] }, // IMPORTANT: Must match order of idiv and co.
	spell_level: "[
				spell_exp[idiv],
				spell_exp[imul],
				spell_exp[isub],
				floor(spell_exp[iadd]^0.5)]",
	
	arg1: { type: "int", default: 1 },
	arg2: { type: "int", default: 1 },
	answer: "switch(opp,
				'/', arg1 / arg2,
				'*', arg1 * arg2,
				'-', arg1 - arg2,
				'+', arg1 + arg2)",
	entry: { type: "string", default: ''},
	_entry: "if(entry = '', '0', entry)",
	temp: { type: "int", default: 0},
	
	create_arg: "def(int _spell_level) -> int
		if(_spell_level < 2, 1d9,	// Next line makes 100 + 1d900 if _spell_level = 3
			(10^(_spell_level-1)) + 1d( (10^_spell_level) - (10^(_spell_level-1)) ))",
	equation_to_string: "fold(map([arg1, opp, arg2, '=', if(entry = '', '_', entry)],
		str(value)), a+b)",
	update_spell_exp: "set(spell_exp,spell_exp[:iopp]
						+ [spell_exp[iopp] + if(answer = int(_entry), 1, if(spell_exp[iopp] = 1, 0, -1))]
						+ spell_exp[iopp+1:])",
			
	init_prepare: "[set(entry, ''), animation('begin_prepare'),
			set(arg1, create_arg(spell_level[iopp])),
			set(arg2, create_arg(spell_level[iopp]))]",
	end_prepare: "[text(''),
			debug(abs(int(_entry) - answer)),
			update_spell_exp,
			if(time_attack, time_attack_loop, animation('look_down'))
			]",
	
	# -- Time Attack stuff here -- #
	time_attack: { type: "bool", default: false },
	time_attack_loop: "[
				if(answer = int(_entry), add(totalpower, spell_level[iopp]^2)),
				init_prepare,
				animation('begin_prepare')
					] where _entry = if(entry = '', '0', entry)",
	totalpower: { type: "int", default: 0 },
	ta_begin_cycle: { type: "int", default: 0 },
	pps: "decimal(totalpower)/(decimal(cycle - ta_begin_cycle)/50.0)", // 50 cycles = 1 second
	peak_pps: { type: "decimal", default: 0 },
	
},	#### EVENTS START HERE ####

on_create: "[animation('look_down'),
			set_up_gui(),
			set(facing, 1)]",	// No flipping! Must always face the same direction
on_end_look_down_anim: "animation('look_down')",

# -- Player Inputs and Animations -- #
on_process: "[map(numpad_opp + numpad_num + [numpad_del], value, track_key(value)),
			if(is_standing, add(y,-1)), // This is a work around for a glitch
			if(pps > peak_pps, set(peak_pps, pps)),

			if(animation != 'prepare', [
				if(ctrl_keyboard(numpad_add) = 1,
					[set(opp, '+'), init_prepare, animation('begin_prepare')]),
				
				if(ctrl_up,
					[set(velocity_y, -movespeed), if(is_doing_nothing, animation('walk_up'))]),
				if(ctrl_down,
					[set(velocity_y, movespeed), if(is_doing_nothing, animation('walk_down'))]),
				if(ctrl_left = true, set(velocity_x, -movespeed)),
				if(ctrl_right = true, set(velocity_x, movespeed))]),
			]",

on_process_walk_up: "if(not ctrl_up, animation('look_up'))",
on_end_walk_up_anim: "animation('walk_up')",

on_process_walk_down: "if(not ctrl_down, animation('look_down'))",
on_end_walk_down_anim: "animation('walk_down')",

/*on_process_run: "if(not (ctrl_left or ctrl_right),
					animation('stand'))",

on_end_hurt_anim: "animation('stand')",*/

# -- Spell Preparing and Casting -- #			
on_end_begin_prepare_anim: "animation('prepare')",

on_process_prepare: "[text(equation_to_string),
		map(range(10), value,
			if(ctrl_keyboard(numpad_num[value]) = 1, set(entry,entry + str(value)))),
		if(ctrl_keyboard(numpad_del) = 1, set(entry, tail(entry)) ),
		//debug('Hello'),
		if(ctrl_keyboard(numpad_enter), end_prepare)]",
		
on_end_prepare: "animation('prepare')",

/*on_ctrl_jump: "if(cycle_of_last_up + 20 < cycle,
			set(cycle_of_last_up, cycle),*/
			
				// Note that we do not simply call 'end_prepare', and this is because
				//  we would have to delay for a frame for the disabling of time_attack to come into effect
on_ctrl_jump: "if(time_attack, [set(time_attack, false), animation('look_down'),
					text(''), set(spell_exp, [1,1,1,1])],

				[set(ta_begin_cycle, cycle), set(totalpower, 0),
				speech_dialog(level.player, [~Begin time attack?\\n(Escape skips through text.)~,
					~Forget it.~, [speech_dialog(level.player, [~Okay...~])],
				
					~Sure!~, [set(time_attack, true), set(opp, '+'), set(peak_pps, 0.0), init_prepare],
				
					~What's Time Attack?~, [speech_dialog(level.player,
					[~Time attack is the closest thing right now\\nto what the game might actually play like.~],
					[~Your goal is to try to get your Power Per Second (pps)\\nas high as you can.~],
					[~Successfully preparing spells, AKA doing the math right,\\nwill boost your total power~],
					[~Incorrectly preparing a spell will only cost you time...~],
					[~...although it is planned to eventually make\\nMage suffer some backlash for messing up.~],
					[~Eventually, there will also be the other magic types,\\n
						but only fire (AKA addition) spells work right now.~],
					[~If you haven't, check out the controls!\\n<em>It's important!</em>~])],
					
					~What are the controls?~, [speech_dialog(level.player,
					[~You may walk around with the arrow keys,\\nalthough the animations aren't done yet.~],
					[~The 'a' key opens this menu.\\nIt also ends Time Attack.~],
					[~When not preparing a spell,\\nyou can tap <em>+</em> to begin preparing~],
					[~While entering an answer, use the numpad numbers.\\n
						Numpad delete (or <em>.</em>) removes a number.~],
					[~Enter on the numpad submits your entry.~])],
					
					~What is this game?~, [speech_dialog(level.player,
					[~This is a game created by Autofire\\nfor the <em>2015 Indie Game Maker Contest</em>.~],
					[~This is a VERY early version. (The first, in fact)\\n
						Because of that, I'm looking for (honest) feedback!~],
					[~If you cannot contact me any other way,\\n
						my email address is <em>autofire555@gmail.com</em>~],
					[~Aside from other comments, please let me know\\n
						on a 1 to 5 rating of how fun you found the game.~],
					[~Also, I'm curious to know your Peak Power per Second.\\n ;)~])],
					
			])] // Closes speech_dialog
		)", // Closes if
#ANIMATIONS#
animation: [
	{
		id: "look_down",
		body_area: "all",
		image: "characters/magician.png",
		rect: [90, 3, 115, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 8,
		pad: 3,
		duration: 6,
	},
	
	{
		id: "walk_down",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 28, 28],
		solid_area: [1,1,18,29],
		frames: 4,
		pad: 3,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "look_up",
		body_area: "all",
		image: "characters/magician.png",
		rect: [208, 3, 233, 28],
		solid_area: [1,1,18,29],
		frames: 1,
		pad: 3,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "walk_up",
		body_area: "all",
		image: "characters/magician.png",
		rect: [121, 3, 146, 28],
		solid_area: [1,1,18,29],
		frames: 4,
		pad: 3,
		frames_per_row: 4,
		duration: 8,
	},
	
	{
		id: "begin_prepare",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 10,
	},
	
	{
		id: "prepare",
		body_area: "all",
		image: "characters/magician.png",
		rect: [3, 3, 27, 27],
		solid_area: [1,1,18,29],
		frames: 1,
		frames_per_row: 1,
		duration: 1,
	},
],

object_type: [
	{
		id: "prepare_spell_dialogue",
		// This will get filled out later, when a
		// more user friendly dialogue is worked out.
		//
		// This object will create several text objects, and then
		// this object will die when those objects are done.
		//   (killing the text objects in the process.)
	},
]
}
